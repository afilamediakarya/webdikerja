/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/metronic/js/pages/custom/login/login-general.js":
/*!*******************************************************************!*\
  !*** ./resources/metronic/js/pages/custom/login/login-general.js ***!
  \*******************************************************************/
/***/ (() => {

eval(" // Class Definition\n\nvar KTLogin = function () {\n  var _login;\n\n  var _showForm = function _showForm(form) {\n    var cls = \"login-\" + form + \"-on\";\n    var form = \"kt_login_\" + form + \"_form\";\n\n    _login.removeClass(\"login-forgot-on\");\n\n    _login.removeClass(\"login-signin-on\");\n\n    _login.removeClass(\"login-signup-on\");\n\n    _login.addClass(cls);\n\n    KTUtil.animateClass(KTUtil.getById(form), \"animate__animated animate__backInUp\");\n  };\n\n  var _handleSignInForm = function _handleSignInForm() {\n    var validation; // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    validation = FormValidation.formValidation(KTUtil.getById(\"kt_login_signin_form\"), {\n      fields: {\n        username: {\n          validators: {\n            notEmpty: {\n              message: \"Username is required\"\n            }\n          }\n        },\n        password: {\n          validators: {\n            notEmpty: {\n              message: \"Password is required\"\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        submitButton: new FormValidation.plugins.SubmitButton(),\n        //defaultSubmit: new FormValidation.plugins.DefaultSubmit(), // Uncomment this line to enable normal button submit after form validation\n        bootstrap: new FormValidation.plugins.Bootstrap()\n      }\n    });\n    $(\"#kt_login_signin_submit\").on(\"click\", function (e) {\n      e.preventDefault();\n      validation.validate().then(function (status) {\n        if (status == \"Valid\") {\n          swal.fire({\n            text: \"All is cool! Now you submit this form\",\n            icon: \"success\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        } else {\n          swal.fire({\n            text: \"Sorry, looks like there are some errors detected, please try again.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        }\n      });\n    }); // Handle forgot button\n\n    $(\"#kt_login_forgot\").on(\"click\", function (e) {\n      e.preventDefault();\n\n      _showForm(\"forgot\");\n    }); // Handle signup\n\n    $(\"#kt_login_signup\").on(\"click\", function (e) {\n      e.preventDefault();\n\n      _showForm(\"signup\");\n    });\n  };\n\n  var _handleSignUpForm = function _handleSignUpForm(e) {\n    var validation;\n    var form = KTUtil.getById(\"kt_login_signup_form\"); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    validation = FormValidation.formValidation(form, {\n      fields: {\n        fullname: {\n          validators: {\n            notEmpty: {\n              message: \"Username is required\"\n            }\n          }\n        },\n        email: {\n          validators: {\n            notEmpty: {\n              message: \"Email address is required\"\n            },\n            emailAddress: {\n              message: \"The value is not a valid email address\"\n            }\n          }\n        },\n        password: {\n          validators: {\n            notEmpty: {\n              message: \"The password is required\"\n            }\n          }\n        },\n        cpassword: {\n          validators: {\n            notEmpty: {\n              message: \"The password confirmation is required\"\n            },\n            identical: {\n              compare: function compare() {\n                return form.querySelector('[name=\"password\"]').value;\n              },\n              message: \"The password and its confirm are not the same\"\n            }\n          }\n        },\n        agree: {\n          validators: {\n            notEmpty: {\n              message: \"You must accept the terms and conditions\"\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap()\n      }\n    });\n    $(\"#kt_login_signup_submit\").on(\"click\", function (e) {\n      e.preventDefault();\n      validation.validate().then(function (status) {\n        if (status == \"Valid\") {\n          swal.fire({\n            text: \"All is cool! Now you submit this form\",\n            icon: \"success\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        } else {\n          swal.fire({\n            text: \"Sorry, looks like there are some errors detected, please try again.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        }\n      });\n    }); // Handle cancel button\n\n    $(\"#kt_login_signup_cancel\").on(\"click\", function (e) {\n      e.preventDefault();\n\n      _showForm(\"signin\");\n    });\n  };\n\n  var _handleForgotForm = function _handleForgotForm(e) {\n    var validation; // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    validation = FormValidation.formValidation(KTUtil.getById(\"kt_login_forgot_form\"), {\n      fields: {\n        email: {\n          validators: {\n            notEmpty: {\n              message: \"Email address is required\"\n            },\n            emailAddress: {\n              message: \"The value is not a valid email address\"\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap()\n      }\n    }); // Handle submit button\n\n    $(\"#kt_login_forgot_submit\").on(\"click\", function (e) {\n      e.preventDefault();\n      validation.validate().then(function (status) {\n        if (status == \"Valid\") {\n          // Submit form\n          KTUtil.scrollTop();\n        } else {\n          swal.fire({\n            text: \"Sorry, looks like there are some errors detected, please try again.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        }\n      });\n    }); // Handle cancel button\n\n    $(\"#kt_login_forgot_cancel\").on(\"click\", function (e) {\n      e.preventDefault();\n\n      _showForm(\"signin\");\n    });\n  }; // Public Functions\n\n\n  return {\n    // public functions\n    init: function init() {\n      _login = $(\"#kt_login\");\n\n      _handleSignInForm();\n\n      _handleSignUpForm();\n\n      _handleForgotForm();\n    }\n  };\n}(); // Class Initialization\n\n\njQuery(document).ready(function () {\n  KTLogin.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvcGFnZXMvY3VzdG9tL2xvZ2luL2xvZ2luLWdlbmVyYWwuanMuanMiLCJtYXBwaW5ncyI6IkNBRUE7O0FBQ0EsSUFBSUEsT0FBTyxHQUFJLFlBQVk7QUFDdkIsTUFBSUMsTUFBSjs7QUFFQSxNQUFJQyxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFVQyxJQUFWLEVBQWdCO0FBQzVCLFFBQUlDLEdBQUcsR0FBRyxXQUFXRCxJQUFYLEdBQWtCLEtBQTVCO0FBQ0EsUUFBSUEsSUFBSSxHQUFHLGNBQWNBLElBQWQsR0FBcUIsT0FBaEM7O0FBRUFGLElBQUFBLE1BQU0sQ0FBQ0ksV0FBUCxDQUFtQixpQkFBbkI7O0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ0ksV0FBUCxDQUFtQixpQkFBbkI7O0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ0ksV0FBUCxDQUFtQixpQkFBbkI7O0FBRUFKLElBQUFBLE1BQU0sQ0FBQ0ssUUFBUCxDQUFnQkYsR0FBaEI7O0FBRUFHLElBQUFBLE1BQU0sQ0FBQ0MsWUFBUCxDQUNJRCxNQUFNLENBQUNFLE9BQVAsQ0FBZU4sSUFBZixDQURKLEVBRUkscUNBRko7QUFJSCxHQWREOztBQWdCQSxNQUFJTyxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQW9CLEdBQVk7QUFDaEMsUUFBSUMsVUFBSixDQURnQyxDQUdoQzs7QUFDQUEsSUFBQUEsVUFBVSxHQUFHQyxjQUFjLENBQUNDLGNBQWYsQ0FDVE4sTUFBTSxDQUFDRSxPQUFQLENBQWUsc0JBQWYsQ0FEUyxFQUVUO0FBQ0lLLE1BQUFBLE1BQU0sRUFBRTtBQUNKQyxRQUFBQSxRQUFRLEVBQUU7QUFDTkMsVUFBQUEsVUFBVSxFQUFFO0FBQ1JDLFlBQUFBLFFBQVEsRUFBRTtBQUNOQyxjQUFBQSxPQUFPLEVBQUU7QUFESDtBQURGO0FBRE4sU0FETjtBQVFKQyxRQUFBQSxRQUFRLEVBQUU7QUFDTkgsVUFBQUEsVUFBVSxFQUFFO0FBQ1JDLFlBQUFBLFFBQVEsRUFBRTtBQUNOQyxj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O0FBRks7QUFMUCxXQUFWLEVBU0dULElBVEgsQ0FTUSxZQUFZO0FBQ2hCekIsWUFBQUEsTUFBTSxDQUFDbUMsU0FBUDtBQUNILFdBWEQ7QUFZSDtBQUNKLE9BbEJEO0FBbUJILEtBdEJELEVBNUJpQyxDQW9EakM7O0FBQ0FmLElBQUFBLENBQUMsQ0FBQyx5QkFBRCxDQUFELENBQTZCQyxFQUE3QixDQUFnQyxPQUFoQyxFQUF5QyxVQUFVQyxDQUFWLEVBQWE7QUFDbERBLE1BQUFBLENBQUMsQ0FBQ0MsY0FBRjs7QUFFQTVCLE1BQUFBLFNBQVMsQ0FBQyxRQUFELENBQVQ7QUFDSCxLQUpEO0FBS0gsR0ExREQsQ0F4TXVCLENBb1F2Qjs7O0FBQ0EsU0FBTztBQUNIO0FBQ0FvRCxJQUFBQSxJQUFJLEVBQUUsZ0JBQVk7QUFDZHJELE1BQUFBLE1BQU0sR0FBRzBCLENBQUMsQ0FBQyxXQUFELENBQVY7O0FBRUFqQixNQUFBQSxpQkFBaUI7O0FBQ2pCaUMsTUFBQUEsaUJBQWlCOztBQUNqQlUsTUFBQUEsaUJBQWlCO0FBQ3BCO0FBUkUsR0FBUDtBQVVILENBL1FhLEVBQWQsQyxDQWlSQTs7O0FBQ0FFLE1BQU0sQ0FBQ0MsUUFBRCxDQUFOLENBQWlCQyxLQUFqQixDQUF1QixZQUFZO0FBQy9CekQsRUFBQUEsT0FBTyxDQUFDc0QsSUFBUjtBQUNILENBRkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvcGFnZXMvY3VzdG9tL2xvZ2luL2xvZ2luLWdlbmVyYWwuanM/Y2JmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLy8gQ2xhc3MgRGVmaW5pdGlvblxudmFyIEtUTG9naW4gPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBfbG9naW47XG5cbiAgICB2YXIgX3Nob3dGb3JtID0gZnVuY3Rpb24gKGZvcm0pIHtcbiAgICAgICAgdmFyIGNscyA9IFwibG9naW4tXCIgKyBmb3JtICsgXCItb25cIjtcbiAgICAgICAgdmFyIGZvcm0gPSBcImt0X2xvZ2luX1wiICsgZm9ybSArIFwiX2Zvcm1cIjtcblxuICAgICAgICBfbG9naW4ucmVtb3ZlQ2xhc3MoXCJsb2dpbi1mb3Jnb3Qtb25cIik7XG4gICAgICAgIF9sb2dpbi5yZW1vdmVDbGFzcyhcImxvZ2luLXNpZ25pbi1vblwiKTtcbiAgICAgICAgX2xvZ2luLnJlbW92ZUNsYXNzKFwibG9naW4tc2lnbnVwLW9uXCIpO1xuXG4gICAgICAgIF9sb2dpbi5hZGRDbGFzcyhjbHMpO1xuXG4gICAgICAgIEtUVXRpbC5hbmltYXRlQ2xhc3MoXG4gICAgICAgICAgICBLVFV0aWwuZ2V0QnlJZChmb3JtKSxcbiAgICAgICAgICAgIFwiYW5pbWF0ZV9fYW5pbWF0ZWQgYW5pbWF0ZV9fYmFja0luVXBcIlxuICAgICAgICApO1xuICAgIH07XG5cbiAgICB2YXIgX2hhbmRsZVNpZ25JbkZvcm0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWxpZGF0aW9uO1xuXG4gICAgICAgIC8vIEluaXQgZm9ybSB2YWxpZGF0aW9uIHJ1bGVzLiBGb3IgbW9yZSBpbmZvIGNoZWNrIHRoZSBGb3JtVmFsaWRhdGlvbiBwbHVnaW4ncyBvZmZpY2lhbCBkb2N1bWVudGF0aW9uOmh0dHBzOi8vZm9ybXZhbGlkYXRpb24uaW8vXG4gICAgICAgIHZhbGlkYXRpb24gPSBGb3JtVmFsaWRhdGlvbi5mb3JtVmFsaWRhdGlvbihcbiAgICAgICAgICAgIEtUVXRpbC5nZXRCeUlkKFwia3RfbG9naW5fc2lnbmluX2Zvcm1cIiksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3JzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90RW1wdHk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJVc2VybmFtZSBpcyByZXF1aXJlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdEVtcHR5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiUGFzc3dvcmQgaXMgcmVxdWlyZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBsdWdpbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuVHJpZ2dlcigpLFxuICAgICAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b246IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLlN1Ym1pdEJ1dHRvbigpLFxuICAgICAgICAgICAgICAgICAgICAvL2RlZmF1bHRTdWJtaXQ6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLkRlZmF1bHRTdWJtaXQoKSwgLy8gVW5jb21tZW50IHRoaXMgbGluZSB0byBlbmFibGUgbm9ybWFsIGJ1dHRvbiBzdWJtaXQgYWZ0ZXIgZm9ybSB2YWxpZGF0aW9uXG4gICAgICAgICAgICAgICAgICAgIGJvb3RzdHJhcDogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuQm9vdHN0cmFwKCksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAkKFwiI2t0X2xvZ2luX3NpZ25pbl9zdWJtaXRcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICB2YWxpZGF0aW9uLnZhbGlkYXRlKCkudGhlbihmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSBcIlZhbGlkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dhbC5maXJlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiQWxsIGlzIGNvb2whIE5vdyB5b3Ugc3VibWl0IHRoaXMgZm9ybVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJPaywgZ290IGl0IVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJ0biBmb250LXdlaWdodC1ib2xkIGJ0bi1saWdodC1wcmltYXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEtUVXRpbC5zY3JvbGxUb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3dhbC5maXJlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiU29ycnksIGxvb2tzIGxpa2UgdGhlcmUgYXJlIHNvbWUgZXJyb3JzIGRldGVjdGVkLCBwbGVhc2UgdHJ5IGFnYWluLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJlcnJvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJidG4gZm9udC13ZWlnaHQtYm9sZCBidG4tbGlnaHQtcHJpbWFyeVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBLVFV0aWwuc2Nyb2xsVG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBIYW5kbGUgZm9yZ290IGJ1dHRvblxuICAgICAgICAkKFwiI2t0X2xvZ2luX2ZvcmdvdFwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBfc2hvd0Zvcm0oXCJmb3Jnb3RcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEhhbmRsZSBzaWdudXBcbiAgICAgICAgJChcIiNrdF9sb2dpbl9zaWdudXBcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgX3Nob3dGb3JtKFwic2lnbnVwXCIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgdmFyIF9oYW5kbGVTaWduVXBGb3JtID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHZhbGlkYXRpb247XG4gICAgICAgIHZhciBmb3JtID0gS1RVdGlsLmdldEJ5SWQoXCJrdF9sb2dpbl9zaWdudXBfZm9ybVwiKTtcblxuICAgICAgICAvLyBJbml0IGZvcm0gdmFsaWRhdGlvbiBydWxlcy4gRm9yIG1vcmUgaW5mbyBjaGVjayB0aGUgRm9ybVZhbGlkYXRpb24gcGx1Z2luJ3Mgb2ZmaWNpYWwgZG9jdW1lbnRhdGlvbjpodHRwczovL2Zvcm12YWxpZGF0aW9uLmlvL1xuICAgICAgICB2YWxpZGF0aW9uID0gRm9ybVZhbGlkYXRpb24uZm9ybVZhbGlkYXRpb24oZm9ybSwge1xuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgICAgZnVsbG5hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm90RW1wdHk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIlVzZXJuYW1lIGlzIHJlcXVpcmVkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW1haWw6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm90RW1wdHk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkVtYWlsIGFkZHJlc3MgaXMgcmVxdWlyZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBlbWFpbEFkZHJlc3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIlRoZSB2YWx1ZSBpcyBub3QgYSB2YWxpZCBlbWFpbCBhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm90RW1wdHk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIlRoZSBwYXNzd29yZCBpcyByZXF1aXJlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNwYXNzd29yZDoge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3JzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub3RFbXB0eToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiVGhlIHBhc3N3b3JkIGNvbmZpcm1hdGlvbiBpcyByZXF1aXJlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkZW50aWNhbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm0ucXVlcnlTZWxlY3RvcignW25hbWU9XCJwYXNzd29yZFwiXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlRoZSBwYXNzd29yZCBhbmQgaXRzIGNvbmZpcm0gYXJlIG5vdCB0aGUgc2FtZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFncmVlOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdEVtcHR5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJZb3UgbXVzdCBhY2NlcHQgdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGx1Z2luczoge1xuICAgICAgICAgICAgICAgIHRyaWdnZXI6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLlRyaWdnZXIoKSxcbiAgICAgICAgICAgICAgICBib290c3RyYXA6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLkJvb3RzdHJhcCgpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJChcIiNrdF9sb2dpbl9zaWdudXBfc3VibWl0XCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgdmFsaWRhdGlvbi52YWxpZGF0ZSgpLnRoZW4oZnVuY3Rpb24gKHN0YXR1cykge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gXCJWYWxpZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3YWwuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIkFsbCBpcyBjb29sISBOb3cgeW91IHN1Ym1pdCB0aGlzIGZvcm1cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJidG4gZm9udC13ZWlnaHQtYm9sZCBidG4tbGlnaHQtcHJpbWFyeVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBLVFV0aWwuc2Nyb2xsVG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN3YWwuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIlNvcnJ5LCBsb29rcyBsaWtlIHRoZXJlIGFyZSBzb21lIGVycm9ycyBkZXRlY3RlZCwgcGxlYXNlIHRyeSBhZ2Fpbi5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwiZXJyb3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYnRuIGZvbnQtd2VpZ2h0LWJvbGQgYnRuLWxpZ2h0LXByaW1hcnlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnNjcm9sbFRvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gSGFuZGxlIGNhbmNlbCBidXR0b25cbiAgICAgICAgJChcIiNrdF9sb2dpbl9zaWdudXBfY2FuY2VsXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgX3Nob3dGb3JtKFwic2lnbmluXCIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgdmFyIF9oYW5kbGVGb3Jnb3RGb3JtID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHZhbGlkYXRpb247XG5cbiAgICAgICAgLy8gSW5pdCBmb3JtIHZhbGlkYXRpb24gcnVsZXMuIEZvciBtb3JlIGluZm8gY2hlY2sgdGhlIEZvcm1WYWxpZGF0aW9uIHBsdWdpbidzIG9mZmljaWFsIGRvY3VtZW50YXRpb246aHR0cHM6Ly9mb3JtdmFsaWRhdGlvbi5pby9cbiAgICAgICAgdmFsaWRhdGlvbiA9IEZvcm1WYWxpZGF0aW9uLmZvcm1WYWxpZGF0aW9uKFxuICAgICAgICAgICAgS1RVdGlsLmdldEJ5SWQoXCJrdF9sb2dpbl9mb3Jnb3RfZm9ybVwiKSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RFbXB0eToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkVtYWlsIGFkZHJlc3MgaXMgcmVxdWlyZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsQWRkcmVzczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaGUgdmFsdWUgaXMgbm90IGEgdmFsaWQgZW1haWwgYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcGx1Z2luczoge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5UcmlnZ2VyKCksXG4gICAgICAgICAgICAgICAgICAgIGJvb3RzdHJhcDogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuQm9vdHN0cmFwKCksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAvLyBIYW5kbGUgc3VibWl0IGJ1dHRvblxuICAgICAgICAkKFwiI2t0X2xvZ2luX2ZvcmdvdF9zdWJtaXRcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICB2YWxpZGF0aW9uLnZhbGlkYXRlKCkudGhlbihmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSBcIlZhbGlkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3VibWl0IGZvcm1cbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnNjcm9sbFRvcCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN3YWwuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIlNvcnJ5LCBsb29rcyBsaWtlIHRoZXJlIGFyZSBzb21lIGVycm9ycyBkZXRlY3RlZCwgcGxlYXNlIHRyeSBhZ2Fpbi5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwiZXJyb3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYnRuIGZvbnQtd2VpZ2h0LWJvbGQgYnRuLWxpZ2h0LXByaW1hcnlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnNjcm9sbFRvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gSGFuZGxlIGNhbmNlbCBidXR0b25cbiAgICAgICAgJChcIiNrdF9sb2dpbl9mb3Jnb3RfY2FuY2VsXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgX3Nob3dGb3JtKFwic2lnbmluXCIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gUHVibGljIEZ1bmN0aW9uc1xuICAgIHJldHVybiB7XG4gICAgICAgIC8vIHB1YmxpYyBmdW5jdGlvbnNcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX2xvZ2luID0gJChcIiNrdF9sb2dpblwiKTtcblxuICAgICAgICAgICAgX2hhbmRsZVNpZ25JbkZvcm0oKTtcbiAgICAgICAgICAgIF9oYW5kbGVTaWduVXBGb3JtKCk7XG4gICAgICAgICAgICBfaGFuZGxlRm9yZ290Rm9ybSgpO1xuICAgICAgICB9LFxuICAgIH07XG59KSgpO1xuXG4vLyBDbGFzcyBJbml0aWFsaXphdGlvblxualF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgS1RMb2dpbi5pbml0KCk7XG59KTtcbiJdLCJuYW1lcyI6WyJLVExvZ2luIiwiX2xvZ2luIiwiX3Nob3dGb3JtIiwiZm9ybSIsImNscyIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJLVFV0aWwiLCJhbmltYXRlQ2xhc3MiLCJnZXRCeUlkIiwiX2hhbmRsZVNpZ25JbkZvcm0iLCJ2YWxpZGF0aW9uIiwiRm9ybVZhbGlkYXRpb24iLCJmb3JtVmFsaWRhdGlvbiIsImZpZWxkcyIsInVzZXJuYW1lIiwidmFsaWRhdG9ycyIsIm5vdEVtcHR5IiwibWVzc2FnZSIsInBhc3N3b3JkIiwicGx1Z2lucyIsInRyaWdnZXIiLCJUcmlnZ2VyIiwic3VibWl0QnV0dG9uIiwiU3VibWl0QnV0dG9uIiwiYm9vdHN0cmFwIiwiQm9vdHN0cmFwIiwiJCIsIm9uIiwiZSIsInByZXZlbnREZWZhdWx0IiwidmFsaWRhdGUiLCJ0aGVuIiwic3RhdHVzIiwic3dhbCIsImZpcmUiLCJ0ZXh0IiwiaWNvbiIsImJ1dHRvbnNTdHlsaW5nIiwiY29uZmlybUJ1dHRvblRleHQiLCJjdXN0b21DbGFzcyIsImNvbmZpcm1CdXR0b24iLCJzY3JvbGxUb3AiLCJfaGFuZGxlU2lnblVwRm9ybSIsImZ1bGxuYW1lIiwiZW1haWwiLCJlbWFpbEFkZHJlc3MiLCJjcGFzc3dvcmQiLCJpZGVudGljYWwiLCJjb21wYXJlIiwicXVlcnlTZWxlY3RvciIsInZhbHVlIiwiYWdyZWUiLCJfaGFuZGxlRm9yZ290Rm9ybSIsImluaXQiLCJqUXVlcnkiLCJkb2N1bWVudCIsInJlYWR5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/custom/login/login-general.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/metronic/js/pages/custom/login/login-general.js"]();
/******/ 	
/******/ })()
;