/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/metronic/js/pages/custom/login/login-general.js":
/*!*******************************************************************!*\
  !*** ./resources/metronic/js/pages/custom/login/login-general.js ***!
  \*******************************************************************/
/***/ (() => {

eval(" // Class Definition\n\nvar KTLogin = function () {\n  var _login;\n\n  var _showForm = function _showForm(form) {\n    var cls = \"login-\" + form + \"-on\";\n    var form = \"kt_login_\" + form + \"_form\";\n\n    _login.removeClass(\"login-forgot-on\");\n\n    _login.removeClass(\"login-signin-on\");\n\n    _login.removeClass(\"login-signup-on\");\n\n    _login.addClass(cls);\n\n    KTUtil.animateClass(KTUtil.getById(form), \"animate__animated animate__backInUp\");\n  };\n\n  var _handleSignInForm = function _handleSignInForm() {\n    var validation; // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    validation = FormValidation.formValidation(KTUtil.getById(\"kt_login_signin_form\"), {\n      fields: {\n        username: {\n          validators: {\n            notEmpty: {\n              message: \"Username is required\"\n            }\n          }\n        },\n        password: {\n          validators: {\n            notEmpty: {\n              message: \"Password is required\"\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        submitButton: new FormValidation.plugins.SubmitButton(),\n        //defaultSubmit: new FormValidation.plugins.DefaultSubmit(), // Uncomment this line to enable normal button submit after form validation\n        bootstrap: new FormValidation.plugins.Bootstrap()\n      }\n    });\n    $(\"#kt_login_signin_submit\").on(\"click\", function (e) {\n      e.preventDefault();\n      validation.validate().then(function (status) {\n        if (status == \"Valid\") {\n          swal.fire({\n            text: \"All is cool! Now you submit this form\",\n            icon: \"success\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        } else {\n          swal.fire({\n            text: \"Sorry, looks like there are some errors detected, please try again.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        }\n      });\n    }); // Handle forgot button\n\n    $(\"#kt_login_forgot\").on(\"click\", function (e) {\n      e.preventDefault();\n\n      _showForm(\"forgot\");\n    }); // Handle signup\n\n    $(\"#kt_login_signup\").on(\"click\", function (e) {\n      e.preventDefault();\n\n      _showForm(\"signup\");\n    });\n  };\n\n  var _handleSignUpForm = function _handleSignUpForm(e) {\n    var validation;\n    var form = KTUtil.getById(\"kt_login_signup_form\"); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    validation = FormValidation.formValidation(form, {\n      fields: {\n        fullname: {\n          validators: {\n            notEmpty: {\n              message: \"Username is required\"\n            }\n          }\n        },\n        email: {\n          validators: {\n            notEmpty: {\n              message: \"Email address is required\"\n            },\n            emailAddress: {\n              message: \"The value is not a valid email address\"\n            }\n          }\n        },\n        password: {\n          validators: {\n            notEmpty: {\n              message: \"The password is required\"\n            }\n          }\n        },\n        cpassword: {\n          validators: {\n            notEmpty: {\n              message: \"The password confirmation is required\"\n            },\n            identical: {\n              compare: function compare() {\n                return form.querySelector('[name=\"password\"]').value;\n              },\n              message: \"The password and its confirm are not the same\"\n            }\n          }\n        },\n        agree: {\n          validators: {\n            notEmpty: {\n              message: \"You must accept the terms and conditions\"\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap()\n      }\n    });\n    $(\"#kt_login_signup_submit\").on(\"click\", function (e) {\n      e.preventDefault();\n      validation.validate().then(function (status) {\n        if (status == \"Valid\") {\n          swal.fire({\n            text: \"All is cool! Now you submit this form\",\n            icon: \"success\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        } else {\n          swal.fire({\n            text: \"Sorry, looks like there are some errors detected, please try again.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        }\n      });\n    }); // Handle cancel button\n\n    $(\"#kt_login_signup_cancel\").on(\"click\", function (e) {\n      e.preventDefault();\n\n      _showForm(\"signin\");\n    });\n  };\n\n  var _handleForgotForm = function _handleForgotForm(e) {\n    var validation; // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    validation = FormValidation.formValidation(KTUtil.getById(\"kt_login_forgot_form\"), {\n      fields: {\n        email: {\n          validators: {\n            notEmpty: {\n              message: \"Email address is required\"\n            },\n            emailAddress: {\n              message: \"The value is not a valid email address\"\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap()\n      }\n    }); // Handle submit button\n\n    $(\"#kt_login_forgot_submit\").on(\"click\", function (e) {\n      e.preventDefault();\n      validation.validate().then(function (status) {\n        if (status == \"Valid\") {\n          // Submit form\n          KTUtil.scrollTop();\n        } else {\n          swal.fire({\n            text: \"Sorry, looks like there are some errors detected, please try again.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        }\n      });\n    }); // Handle cancel button\n\n    $(\"#kt_login_forgot_cancel\").on(\"click\", function (e) {\n      e.preventDefault();\n\n      _showForm(\"signin\");\n    });\n  }; // Public Functions\n\n\n  return {\n    // public functions\n    init: function init() {\n      _login = $(\"#kt_login\");\n\n      _handleSignInForm();\n\n      _handleSignUpForm();\n\n      _handleForgotForm();\n    }\n  };\n}(); // Class Initialization\n\n\njQuery(document).ready(function () {\n  KTLogin.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvcGFnZXMvY3VzdG9tL2xvZ2luL2xvZ2luLWdlbmVyYWwuanMuanMiLCJtYXBwaW5ncyI6IkNBRUE7O0FBQ0EsSUFBSUEsT0FBTyxHQUFJLFlBQVk7QUFDdkIsTUFBSUMsTUFBSjs7QUFFQSxNQUFJQyxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFVQyxJQUFWLEVBQWdCO0FBQzVCLFFBQUlDLEdBQUcsR0FBRyxXQUFXRCxJQUFYLEdBQWtCLEtBQTVCO0FBQ0EsUUFBSUEsSUFBSSxHQUFHLGNBQWNBLElBQWQsR0FBcUIsT0FBaEM7O0FBRUFGLElBQUFBLE1BQU0sQ0FBQ0ksV0FBUCxDQUFtQixpQkFBbkI7O0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ0ksV0FBUCxDQUFtQixpQkFBbkI7O0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ0ksV0FBUCxDQUFtQixpQkFBbkI7O0FBRUFKLElBQUFBLE1BQU0sQ0FBQ0ssUUFBUCxDQUFnQkYsR0FBaEI7O0FBRUFHLElBQUFBLE1BQU0sQ0FBQ0MsWUFBUCxDQUNJRCxNQUFNLENBQUNFLE9BQVAsQ0FBZU4sSUFBZixDQURKLEVBRUkscUNBRko7QUFJSCxHQWREOztBQWdCQSxNQUFJTyxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQW9CLEdBQVk7QUFDaEMsUUFBSUMsVUFBSixDQURnQyxDQUdoQzs7QUFDQUEsSUFBQUEsVUFBVSxHQUFHQyxjQUFjLENBQUNDLGNBQWYsQ0FDVE4sTUFBTSxDQUFDRSxPQUFQLENBQWUsc0JBQWYsQ0FEUyxFQUVUO0FBQ0lLLE1BQUFBLE1BQU0sRUFBRTtBQUNKQyxRQUFBQSxRQUFRLEVBQUU7QUFDTkMsVUFBQUEsVUFBVSxFQUFFO0FBQ1JDLFlBQUFBLFFBQVEsRUFBRTtBQUNOQyxjQUFBQSxPQUFPLEVBQUU7QUFESDtBQURGO0FBRE4sU0FETjtBQVFKQyxRQUFBQSxRQUFRLEVBQUU7QUFDTkgsVUFBQUEsVUFBVSxFQUFFO0FBQ1JDLFlBQUFBLFFBQVEsRUFBRTtBQUNOQyxj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O0FBRks7QUFMUCxXQUFWLEVBU0dULElBVEgsQ0FTUSxZQUFZO0FBQ2hCekIsWUFBQUEsTUFBTSxDQUFDbUMsU0FBUDtBQUNILFdBWEQ7QUFZSDtBQUNKLE9BbEJEO0FBbUJILEtBdEJELEVBNUJpQyxDQW9EakM7O0FBQ0FmLElBQUFBLENBQUMsQ0FBQyx5QkFBRCxDQUFELENBQTZCQyxFQUE3QixDQUFnQyxPQUFoQyxFQUF5QyxVQUFVQyxDQUFWLEVBQWE7QUFDbERBLE1BQUFBLENBQUMsQ0FBQ0MsY0FBRjs7QUFFQTVCLE1BQUFBLFNBQVMsQ0FBQyxRQUFELENBQVQ7QUFDSCxLQUpEO0FBS0gsR0ExREQsQ0F4TXVCLENBb1F2Qjs7O0FBQ0EsU0FBTztBQUNIO0FBQ0FvRCxJQUFBQSxJQUFJLEVBQUUsZ0JBQVk7QUFDZHJELE1BQUFBLE1BQU0sR0FBRzBCLENBQUMsQ0FBQyxXQUFELENBQVY7O0FBRUFqQixNQUFBQSxpQkFBaUI7O0FBQ2pCaUMsTUFBQUEsaUJBQWlCOztBQUNqQlUsTUFBQUEsaUJBQWlCO0FBQ3BCO0FBUkUsR0FBUDtBQVVILENBL1FhLEVBQWQsQyxDQWlSQTs7O0FBQ0FFLE1BQU0sQ0FBQ0MsUUFBRCxDQUFOLENBQWlCQyxLQUFqQixDQUF1QixZQUFZO0FBQy9CekQsRUFBQUEsT0FBTyxDQUFDc0QsSUFBUjtBQUNILENBRkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvcGFnZXMvY3VzdG9tL2xvZ2luL2xvZ2luLWdlbmVyYWwuanM/Y2JmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8vIENsYXNzIERlZmluaXRpb25cclxudmFyIEtUTG9naW4gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF9sb2dpbjtcclxuXHJcbiAgICB2YXIgX3Nob3dGb3JtID0gZnVuY3Rpb24gKGZvcm0pIHtcclxuICAgICAgICB2YXIgY2xzID0gXCJsb2dpbi1cIiArIGZvcm0gKyBcIi1vblwiO1xyXG4gICAgICAgIHZhciBmb3JtID0gXCJrdF9sb2dpbl9cIiArIGZvcm0gKyBcIl9mb3JtXCI7XHJcblxyXG4gICAgICAgIF9sb2dpbi5yZW1vdmVDbGFzcyhcImxvZ2luLWZvcmdvdC1vblwiKTtcclxuICAgICAgICBfbG9naW4ucmVtb3ZlQ2xhc3MoXCJsb2dpbi1zaWduaW4tb25cIik7XHJcbiAgICAgICAgX2xvZ2luLnJlbW92ZUNsYXNzKFwibG9naW4tc2lnbnVwLW9uXCIpO1xyXG5cclxuICAgICAgICBfbG9naW4uYWRkQ2xhc3MoY2xzKTtcclxuXHJcbiAgICAgICAgS1RVdGlsLmFuaW1hdGVDbGFzcyhcclxuICAgICAgICAgICAgS1RVdGlsLmdldEJ5SWQoZm9ybSksXHJcbiAgICAgICAgICAgIFwiYW5pbWF0ZV9fYW5pbWF0ZWQgYW5pbWF0ZV9fYmFja0luVXBcIlxyXG4gICAgICAgICk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBfaGFuZGxlU2lnbkluRm9ybSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdmFsaWRhdGlvbjtcclxuXHJcbiAgICAgICAgLy8gSW5pdCBmb3JtIHZhbGlkYXRpb24gcnVsZXMuIEZvciBtb3JlIGluZm8gY2hlY2sgdGhlIEZvcm1WYWxpZGF0aW9uIHBsdWdpbidzIG9mZmljaWFsIGRvY3VtZW50YXRpb246aHR0cHM6Ly9mb3JtdmFsaWRhdGlvbi5pby9cclxuICAgICAgICB2YWxpZGF0aW9uID0gRm9ybVZhbGlkYXRpb24uZm9ybVZhbGlkYXRpb24oXHJcbiAgICAgICAgICAgIEtUVXRpbC5nZXRCeUlkKFwia3RfbG9naW5fc2lnbmluX2Zvcm1cIiksXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZpZWxkczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdEVtcHR5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJVc2VybmFtZSBpcyByZXF1aXJlZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdEVtcHR5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJQYXNzd29yZCBpcyByZXF1aXJlZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHBsdWdpbnM6IHtcclxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5UcmlnZ2VyKCksXHJcbiAgICAgICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5TdWJtaXRCdXR0b24oKSxcclxuICAgICAgICAgICAgICAgICAgICAvL2RlZmF1bHRTdWJtaXQ6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLkRlZmF1bHRTdWJtaXQoKSwgLy8gVW5jb21tZW50IHRoaXMgbGluZSB0byBlbmFibGUgbm9ybWFsIGJ1dHRvbiBzdWJtaXQgYWZ0ZXIgZm9ybSB2YWxpZGF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgYm9vdHN0cmFwOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5Cb290c3RyYXAoKSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAkKFwiI2t0X2xvZ2luX3NpZ25pbl9zdWJtaXRcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICB2YWxpZGF0aW9uLnZhbGlkYXRlKCkudGhlbihmdW5jdGlvbiAoc3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09IFwiVmFsaWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiQWxsIGlzIGNvb2whIE5vdyB5b3Ugc3VibWl0IHRoaXMgZm9ybVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcInN1Y2Nlc3NcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJPaywgZ290IGl0IVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJ0biBmb250LXdlaWdodC1ib2xkIGJ0bi1saWdodC1wcmltYXJ5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEtUVXRpbC5zY3JvbGxUb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJTb3JyeSwgbG9va3MgbGlrZSB0aGVyZSBhcmUgc29tZSBlcnJvcnMgZGV0ZWN0ZWQsIHBsZWFzZSB0cnkgYWdhaW4uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwiZXJyb3JcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJPaywgZ290IGl0IVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJ0biBmb250LXdlaWdodC1ib2xkIGJ0bi1saWdodC1wcmltYXJ5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEtUVXRpbC5zY3JvbGxUb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEhhbmRsZSBmb3Jnb3QgYnV0dG9uXHJcbiAgICAgICAgJChcIiNrdF9sb2dpbl9mb3Jnb3RcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIF9zaG93Rm9ybShcImZvcmdvdFwiKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gSGFuZGxlIHNpZ251cFxyXG4gICAgICAgICQoXCIja3RfbG9naW5fc2lnbnVwXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBfc2hvd0Zvcm0oXCJzaWdudXBcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBfaGFuZGxlU2lnblVwRm9ybSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgdmFyIHZhbGlkYXRpb247XHJcbiAgICAgICAgdmFyIGZvcm0gPSBLVFV0aWwuZ2V0QnlJZChcImt0X2xvZ2luX3NpZ251cF9mb3JtXCIpO1xyXG5cclxuICAgICAgICAvLyBJbml0IGZvcm0gdmFsaWRhdGlvbiBydWxlcy4gRm9yIG1vcmUgaW5mbyBjaGVjayB0aGUgRm9ybVZhbGlkYXRpb24gcGx1Z2luJ3Mgb2ZmaWNpYWwgZG9jdW1lbnRhdGlvbjpodHRwczovL2Zvcm12YWxpZGF0aW9uLmlvL1xyXG4gICAgICAgIHZhbGlkYXRpb24gPSBGb3JtVmFsaWRhdGlvbi5mb3JtVmFsaWRhdGlvbihmb3JtLCB7XHJcbiAgICAgICAgICAgIGZpZWxkczoge1xyXG4gICAgICAgICAgICAgICAgZnVsbG5hbWU6IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3JzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdEVtcHR5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIlVzZXJuYW1lIGlzIHJlcXVpcmVkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlbWFpbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm90RW1wdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiRW1haWwgYWRkcmVzcyBpcyByZXF1aXJlZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbWFpbEFkZHJlc3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiVGhlIHZhbHVlIGlzIG5vdCBhIHZhbGlkIGVtYWlsIGFkZHJlc3NcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub3RFbXB0eToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJUaGUgcGFzc3dvcmQgaXMgcmVxdWlyZWRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNwYXNzd29yZDoge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm90RW1wdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiVGhlIHBhc3N3b3JkIGNvbmZpcm1hdGlvbiBpcyByZXF1aXJlZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZGVudGljYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybS5xdWVyeVNlbGVjdG9yKCdbbmFtZT1cInBhc3N3b3JkXCJdJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaGUgcGFzc3dvcmQgYW5kIGl0cyBjb25maXJtIGFyZSBub3QgdGhlIHNhbWVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFncmVlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub3RFbXB0eToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJZb3UgbXVzdCBhY2NlcHQgdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsdWdpbnM6IHtcclxuICAgICAgICAgICAgICAgIHRyaWdnZXI6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLlRyaWdnZXIoKSxcclxuICAgICAgICAgICAgICAgIGJvb3RzdHJhcDogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuQm9vdHN0cmFwKCksXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQoXCIja3RfbG9naW5fc2lnbnVwX3N1Ym1pdFwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb24udmFsaWRhdGUoKS50aGVuKGZ1bmN0aW9uIChzdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gXCJWYWxpZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJBbGwgaXMgY29vbCEgTm93IHlvdSBzdWJtaXQgdGhpcyBmb3JtXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwic3VjY2Vzc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYnRuIGZvbnQtd2VpZ2h0LWJvbGQgYnRuLWxpZ2h0LXByaW1hcnlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnNjcm9sbFRvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIlNvcnJ5LCBsb29rcyBsaWtlIHRoZXJlIGFyZSBzb21lIGVycm9ycyBkZXRlY3RlZCwgcGxlYXNlIHRyeSBhZ2Fpbi5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJlcnJvclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYnRuIGZvbnQtd2VpZ2h0LWJvbGQgYnRuLWxpZ2h0LXByaW1hcnlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnNjcm9sbFRvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gSGFuZGxlIGNhbmNlbCBidXR0b25cclxuICAgICAgICAkKFwiI2t0X2xvZ2luX3NpZ251cF9jYW5jZWxcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICBfc2hvd0Zvcm0oXCJzaWduaW5cIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBfaGFuZGxlRm9yZ290Rm9ybSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgdmFyIHZhbGlkYXRpb247XHJcblxyXG4gICAgICAgIC8vIEluaXQgZm9ybSB2YWxpZGF0aW9uIHJ1bGVzLiBGb3IgbW9yZSBpbmZvIGNoZWNrIHRoZSBGb3JtVmFsaWRhdGlvbiBwbHVnaW4ncyBvZmZpY2lhbCBkb2N1bWVudGF0aW9uOmh0dHBzOi8vZm9ybXZhbGlkYXRpb24uaW8vXHJcbiAgICAgICAgdmFsaWRhdGlvbiA9IEZvcm1WYWxpZGF0aW9uLmZvcm1WYWxpZGF0aW9uKFxyXG4gICAgICAgICAgICBLVFV0aWwuZ2V0QnlJZChcImt0X2xvZ2luX2ZvcmdvdF9mb3JtXCIpLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmaWVsZHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbWFpbDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3JzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RFbXB0eToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiRW1haWwgYWRkcmVzcyBpcyByZXF1aXJlZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsQWRkcmVzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVGhlIHZhbHVlIGlzIG5vdCBhIHZhbGlkIGVtYWlsIGFkZHJlc3NcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBwbHVnaW5zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuVHJpZ2dlcigpLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvb3RzdHJhcDogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuQm9vdHN0cmFwKCksXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gSGFuZGxlIHN1Ym1pdCBidXR0b25cclxuICAgICAgICAkKFwiI2t0X2xvZ2luX2ZvcmdvdF9zdWJtaXRcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICB2YWxpZGF0aW9uLnZhbGlkYXRlKCkudGhlbihmdW5jdGlvbiAoc3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09IFwiVmFsaWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFN1Ym1pdCBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnNjcm9sbFRvcCgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIlNvcnJ5LCBsb29rcyBsaWtlIHRoZXJlIGFyZSBzb21lIGVycm9ycyBkZXRlY3RlZCwgcGxlYXNlIHRyeSBhZ2Fpbi5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJlcnJvclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYnRuIGZvbnQtd2VpZ2h0LWJvbGQgYnRuLWxpZ2h0LXByaW1hcnlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnNjcm9sbFRvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gSGFuZGxlIGNhbmNlbCBidXR0b25cclxuICAgICAgICAkKFwiI2t0X2xvZ2luX2ZvcmdvdF9jYW5jZWxcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICBfc2hvd0Zvcm0oXCJzaWduaW5cIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFB1YmxpYyBGdW5jdGlvbnNcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLy8gcHVibGljIGZ1bmN0aW9uc1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX2xvZ2luID0gJChcIiNrdF9sb2dpblwiKTtcclxuXHJcbiAgICAgICAgICAgIF9oYW5kbGVTaWduSW5Gb3JtKCk7XHJcbiAgICAgICAgICAgIF9oYW5kbGVTaWduVXBGb3JtKCk7XHJcbiAgICAgICAgICAgIF9oYW5kbGVGb3Jnb3RGb3JtKCk7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn0pKCk7XHJcblxyXG4vLyBDbGFzcyBJbml0aWFsaXphdGlvblxyXG5qUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuICAgIEtUTG9naW4uaW5pdCgpO1xyXG59KTtcclxuIl0sIm5hbWVzIjpbIktUTG9naW4iLCJfbG9naW4iLCJfc2hvd0Zvcm0iLCJmb3JtIiwiY2xzIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsIktUVXRpbCIsImFuaW1hdGVDbGFzcyIsImdldEJ5SWQiLCJfaGFuZGxlU2lnbkluRm9ybSIsInZhbGlkYXRpb24iLCJGb3JtVmFsaWRhdGlvbiIsImZvcm1WYWxpZGF0aW9uIiwiZmllbGRzIiwidXNlcm5hbWUiLCJ2YWxpZGF0b3JzIiwibm90RW1wdHkiLCJtZXNzYWdlIiwicGFzc3dvcmQiLCJwbHVnaW5zIiwidHJpZ2dlciIsIlRyaWdnZXIiLCJzdWJtaXRCdXR0b24iLCJTdWJtaXRCdXR0b24iLCJib290c3RyYXAiLCJCb290c3RyYXAiLCIkIiwib24iLCJlIiwicHJldmVudERlZmF1bHQiLCJ2YWxpZGF0ZSIsInRoZW4iLCJzdGF0dXMiLCJzd2FsIiwiZmlyZSIsInRleHQiLCJpY29uIiwiYnV0dG9uc1N0eWxpbmciLCJjb25maXJtQnV0dG9uVGV4dCIsImN1c3RvbUNsYXNzIiwiY29uZmlybUJ1dHRvbiIsInNjcm9sbFRvcCIsIl9oYW5kbGVTaWduVXBGb3JtIiwiZnVsbG5hbWUiLCJlbWFpbCIsImVtYWlsQWRkcmVzcyIsImNwYXNzd29yZCIsImlkZW50aWNhbCIsImNvbXBhcmUiLCJxdWVyeVNlbGVjdG9yIiwidmFsdWUiLCJhZ3JlZSIsIl9oYW5kbGVGb3Jnb3RGb3JtIiwiaW5pdCIsImpRdWVyeSIsImRvY3VtZW50IiwicmVhZHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/custom/login/login-general.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/metronic/js/pages/custom/login/login-general.js"]();
/******/ 	
/******/ })()
;