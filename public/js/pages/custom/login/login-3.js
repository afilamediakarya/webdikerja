/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/metronic/js/pages/custom/login/login-3.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/pages/custom/login/login-3.js ***!
  \*************************************************************/
/***/ (() => {

eval(" // Class Definition\n\nvar KTLogin = function () {\n  var _buttonSpinnerClasses = 'spinner spinner-right spinner-white pr-15';\n\n  var _handleFormSignin = function _handleFormSignin() {\n    var form = KTUtil.getById('kt_login_singin_form');\n    var formSubmitUrl = KTUtil.attr(form, 'action');\n    var formSubmitButton = KTUtil.getById('kt_login_singin_form_submit_button');\n\n    if (!form) {\n      return;\n    }\n\n    FormValidation.formValidation(form, {\n      fields: {\n        username: {\n          validators: {\n            notEmpty: {\n              message: 'Username is required'\n            }\n          }\n        },\n        password: {\n          validators: {\n            notEmpty: {\n              message: 'Password is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        submitButton: new FormValidation.plugins.SubmitButton(),\n        //defaultSubmit: new FormValidation.plugins.DefaultSubmit(), // Uncomment this line to enable normal button submit after form validation\n        bootstrap: new FormValidation.plugins.Bootstrap({//\teleInvalidClass: '', // Repace with uncomment to hide bootstrap validation icons\n          //\teleValidClass: '',   // Repace with uncomment to hide bootstrap validation icons\n        })\n      }\n    }).on('core.form.valid', function () {\n      // Show loading state on button\n      KTUtil.btnWait(formSubmitButton, _buttonSpinnerClasses, \"Please wait\"); // Simulate Ajax request\n\n      setTimeout(function () {\n        KTUtil.btnRelease(formSubmitButton);\n      }, 2000); // Form Validation & Ajax Submission: https://formvalidation.io/guide/examples/using-ajax-to-submit-the-form\n\n      /**\n            FormValidation.utils.fetch(formSubmitUrl, {\n                method: 'POST',\n      \tdataType: 'json',\n                params: {\n                    name: form.querySelector('[name=\"username\"]').value,\n                    email: form.querySelector('[name=\"password\"]').value,\n                },\n            }).then(function(response) { // Return valid JSON\n      \t// Release button\n      \tKTUtil.btnRelease(formSubmitButton);\n      \t\tif (response && typeof response === 'object' && response.status && response.status == 'success') {\n      \t\tSwal.fire({\n                     text: \"All is cool! Now you submit this form\",\n                     icon: \"success\",\n                     buttonsStyling: false,\n      \t\t\tconfirmButtonText: \"Ok, got it!\",\n      \t\t\tcustomClass: {\n      \t\t\t\tconfirmButton: \"btn font-weight-bold btn-light-primary\"\n      \t\t\t}\n                 }).then(function() {\n      \t\t\tKTUtil.scrollTop();\n      \t\t});\n      \t} else {\n      \t\tSwal.fire({\n                     text: \"Sorry, something went wrong, please try again.\",\n                     icon: \"error\",\n                     buttonsStyling: false,\n      \t\t\tconfirmButtonText: \"Ok, got it!\",\n      \t\t\tcustomClass: {\n      \t\t\t\tconfirmButton: \"btn font-weight-bold btn-light-primary\"\n      \t\t\t}\n                 }).then(function() {\n      \t\t\tKTUtil.scrollTop();\n      \t\t});\n      \t}\n            });\n      **/\n    }).on('core.form.invalid', function () {\n      Swal.fire({\n        text: \"Sorry, looks like there are some errors detected, please try again.\",\n        icon: \"error\",\n        buttonsStyling: false,\n        confirmButtonText: \"Ok, got it!\",\n        customClass: {\n          confirmButton: \"btn font-weight-bold btn-light-primary\"\n        }\n      }).then(function () {\n        KTUtil.scrollTop();\n      });\n    });\n  };\n\n  var _handleFormForgot = function _handleFormForgot() {\n    var form = KTUtil.getById('kt_login_forgot_form');\n    var formSubmitUrl = KTUtil.attr(form, 'action');\n    var formSubmitButton = KTUtil.getById('kt_login_forgot_form_submit_button');\n\n    if (!form) {\n      return;\n    }\n\n    FormValidation.formValidation(form, {\n      fields: {\n        email: {\n          validators: {\n            notEmpty: {\n              message: 'Email is required'\n            },\n            emailAddress: {\n              message: 'The value is not a valid email address'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        submitButton: new FormValidation.plugins.SubmitButton(),\n        //defaultSubmit: new FormValidation.plugins.DefaultSubmit(), // Uncomment this line to enable normal button submit after form validation\n        bootstrap: new FormValidation.plugins.Bootstrap({//\teleInvalidClass: '', // Repace with uncomment to hide bootstrap validation icons\n          //\teleValidClass: '',   // Repace with uncomment to hide bootstrap validation icons\n        })\n      }\n    }).on('core.form.valid', function () {\n      // Show loading state on button\n      KTUtil.btnWait(formSubmitButton, _buttonSpinnerClasses, \"Please wait\"); // Simulate Ajax request\n\n      setTimeout(function () {\n        KTUtil.btnRelease(formSubmitButton);\n      }, 2000);\n    }).on('core.form.invalid', function () {\n      Swal.fire({\n        text: \"Sorry, looks like there are some errors detected, please try again.\",\n        icon: \"error\",\n        buttonsStyling: false,\n        confirmButtonText: \"Ok, got it!\",\n        customClass: {\n          confirmButton: \"btn font-weight-bold btn-light-primary\"\n        }\n      }).then(function () {\n        KTUtil.scrollTop();\n      });\n    });\n  };\n\n  var _handleFormSignup = function _handleFormSignup() {\n    // Base elements\n    var wizardEl = KTUtil.getById('kt_login');\n    var form = KTUtil.getById('kt_login_signup_form');\n    var wizardObj;\n    var validations = [];\n\n    if (!form) {\n      return;\n    } // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    // Step 1\n\n\n    validations.push(FormValidation.formValidation(form, {\n      fields: {\n        fname: {\n          validators: {\n            notEmpty: {\n              message: 'First name is required'\n            }\n          }\n        },\n        lname: {\n          validators: {\n            notEmpty: {\n              message: 'Last Name is required'\n            }\n          }\n        },\n        phone: {\n          validators: {\n            notEmpty: {\n              message: 'Phone is required'\n            }\n          }\n        },\n        email: {\n          validators: {\n            notEmpty: {\n              message: 'Email is required'\n            },\n            emailAddress: {\n              message: 'The value is not a valid email address'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        // Bootstrap Framework Integration\n        bootstrap: new FormValidation.plugins.Bootstrap({\n          //eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    })); // Step 2\n\n    validations.push(FormValidation.formValidation(form, {\n      fields: {\n        address1: {\n          validators: {\n            notEmpty: {\n              message: 'Address is required'\n            }\n          }\n        },\n        postcode: {\n          validators: {\n            notEmpty: {\n              message: 'Postcode is required'\n            }\n          }\n        },\n        city: {\n          validators: {\n            notEmpty: {\n              message: 'City is required'\n            }\n          }\n        },\n        state: {\n          validators: {\n            notEmpty: {\n              message: 'State is required'\n            }\n          }\n        },\n        country: {\n          validators: {\n            notEmpty: {\n              message: 'Country is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        // Bootstrap Framework Integration\n        bootstrap: new FormValidation.plugins.Bootstrap({\n          //eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    })); // Step 3\n\n    validations.push(FormValidation.formValidation(form, {\n      fields: {\n        delivery: {\n          validators: {\n            notEmpty: {\n              message: 'Delivery type is required'\n            }\n          }\n        },\n        packaging: {\n          validators: {\n            notEmpty: {\n              message: 'Packaging type is required'\n            }\n          }\n        },\n        preferreddelivery: {\n          validators: {\n            notEmpty: {\n              message: 'Preferred delivery window is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        // Bootstrap Framework Integration\n        bootstrap: new FormValidation.plugins.Bootstrap({\n          //eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    })); // Step 4\n\n    validations.push(FormValidation.formValidation(form, {\n      fields: {\n        ccname: {\n          validators: {\n            notEmpty: {\n              message: 'Credit card name is required'\n            }\n          }\n        },\n        ccnumber: {\n          validators: {\n            notEmpty: {\n              message: 'Credit card number is required'\n            },\n            creditCard: {\n              message: 'The credit card number is not valid'\n            }\n          }\n        },\n        ccmonth: {\n          validators: {\n            notEmpty: {\n              message: 'Credit card month is required'\n            }\n          }\n        },\n        ccyear: {\n          validators: {\n            notEmpty: {\n              message: 'Credit card year is required'\n            }\n          }\n        },\n        cccvv: {\n          validators: {\n            notEmpty: {\n              message: 'Credit card CVV is required'\n            },\n            digits: {\n              message: 'The CVV value is not valid. Only numbers is allowed'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        // Bootstrap Framework Integration\n        bootstrap: new FormValidation.plugins.Bootstrap({\n          //eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    })); // Initialize form wizard\n\n    wizardObj = new KTWizard(wizardEl, {\n      startStep: 1,\n      // initial active step number\n      clickableSteps: false // allow step clicking\n\n    }); // Validation before going to next page\n\n    wizardObj.on('change', function (wizard) {\n      if (wizard.getStep() > wizard.getNewStep()) {\n        return; // Skip if stepped back\n      } // Validate form before change wizard step\n\n\n      var validator = validations[wizard.getStep() - 1]; // get validator for currnt step\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          if (status == 'Valid') {\n            wizard.goTo(wizard.getNewStep());\n            KTUtil.scrollTop();\n          } else {\n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn font-weight-bold btn-light\"\n              }\n            }).then(function () {\n              KTUtil.scrollTop();\n            });\n          }\n        });\n      }\n\n      return false; // Do not change wizard step, further action will be handled by he validator\n    }); // Change event\n\n    wizardObj.on('changed', function (wizard) {\n      KTUtil.scrollTop();\n    }); // Submit event\n\n    wizardObj.on('submit', function (wizard) {\n      Swal.fire({\n        text: \"All is good! Please confirm the form submission.\",\n        icon: \"success\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, submit!\",\n        cancelButtonText: \"No, cancel\",\n        customClass: {\n          confirmButton: \"btn font-weight-bold btn-primary\",\n          cancelButton: \"btn font-weight-bold btn-default\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.submit(); // Submit form\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been submitted!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  }; // Public Functions\n\n\n  return {\n    init: function init() {\n      _handleFormSignin();\n\n      _handleFormForgot();\n\n      _handleFormSignup();\n    }\n  };\n}(); // Class Initialization\n\n\njQuery(document).ready(function () {\n  KTLogin.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/custom/login/login-3.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/metronic/js/pages/custom/login/login-3.js"]();
/******/ 	
/******/ })()
;