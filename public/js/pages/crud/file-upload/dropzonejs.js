/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/metronic/js/pages/crud/file-upload/dropzonejs.js":
/*!********************************************************************!*\
  !*** ./resources/metronic/js/pages/crud/file-upload/dropzonejs.js ***!
  \********************************************************************/
/***/ (() => {

eval(" // Class definition\n\nvar KTDropzoneDemo = function () {\n  // Private functions\n  var demo1 = function demo1() {\n    // single file upload\n    $('#kt_dropzone_1').dropzone({\n      url: \"https://keenthemes.com/scripts/void.php\",\n      // Set the url for your upload script location\n      paramName: \"file\",\n      // The name that will be used to transfer the file\n      maxFiles: 1,\n      maxFilesize: 5,\n      // MB\n      addRemoveLinks: true,\n      accept: function accept(file, done) {\n        if (file.name == \"justinbieber.jpg\") {\n          done(\"Naha, you don't.\");\n        } else {\n          done();\n        }\n      }\n    }); // multiple file upload\n\n    $('#kt_dropzone_2').dropzone({\n      url: \"https://keenthemes.com/scripts/void.php\",\n      // Set the url for your upload script location\n      paramName: \"file\",\n      // The name that will be used to transfer the file\n      maxFiles: 10,\n      maxFilesize: 10,\n      // MB\n      addRemoveLinks: true,\n      accept: function accept(file, done) {\n        if (file.name == \"justinbieber.jpg\") {\n          done(\"Naha, you don't.\");\n        } else {\n          done();\n        }\n      }\n    }); // file type validation\n\n    $('#kt_dropzone_3').dropzone({\n      url: \"https://keenthemes.com/scripts/void.php\",\n      // Set the url for your upload script location\n      paramName: \"file\",\n      // The name that will be used to transfer the file\n      maxFiles: 10,\n      maxFilesize: 10,\n      // MB\n      addRemoveLinks: true,\n      acceptedFiles: \"image/*,application/pdf,.psd\",\n      accept: function accept(file, done) {\n        if (file.name == \"justinbieber.jpg\") {\n          done(\"Naha, you don't.\");\n        } else {\n          done();\n        }\n      }\n    });\n  };\n\n  var demo2 = function demo2() {\n    // set the dropzone container id\n    var id = '#kt_dropzone_4'; // set the preview element template\n\n    var previewNode = $(id + \" .dropzone-item\");\n    previewNode.id = \"\";\n    var previewTemplate = previewNode.parent('.dropzone-items').html();\n    previewNode.remove();\n    var myDropzone4 = new Dropzone(id, {\n      // Make the whole body a dropzone\n      url: \"https://keenthemes.com/scripts/void.php\",\n      // Set the url for your upload script location\n      parallelUploads: 20,\n      previewTemplate: previewTemplate,\n      maxFilesize: 1,\n      // Max filesize in MB\n      autoQueue: false,\n      // Make sure the files aren't queued until manually added\n      previewsContainer: id + \" .dropzone-items\",\n      // Define the container to display the previews\n      clickable: id + \" .dropzone-select\" // Define the element that should be used as click trigger to select files.\n\n    });\n    myDropzone4.on(\"addedfile\", function (file) {\n      // Hookup the start button\n      file.previewElement.querySelector(id + \" .dropzone-start\").onclick = function () {\n        myDropzone4.enqueueFile(file);\n      };\n\n      $(document).find(id + ' .dropzone-item').css('display', '');\n      $(id + \" .dropzone-upload, \" + id + \" .dropzone-remove-all\").css('display', 'inline-block');\n    }); // Update the total progress bar\n\n    myDropzone4.on(\"totaluploadprogress\", function (progress) {\n      $(this).find(id + \" .progress-bar\").css('width', progress + \"%\");\n    });\n    myDropzone4.on(\"sending\", function (file) {\n      // Show the total progress bar when upload starts\n      $(id + \" .progress-bar\").css('opacity', '1'); // And disable the start button\n\n      file.previewElement.querySelector(id + \" .dropzone-start\").setAttribute(\"disabled\", \"disabled\");\n    }); // Hide the total progress bar when nothing's uploading anymore\n\n    myDropzone4.on(\"complete\", function (progress) {\n      var thisProgressBar = id + \" .dz-complete\";\n      setTimeout(function () {\n        $(thisProgressBar + \" .progress-bar, \" + thisProgressBar + \" .progress, \" + thisProgressBar + \" .dropzone-start\").css('opacity', '0');\n      }, 300);\n    }); // Setup the buttons for all transfers\n\n    document.querySelector(id + \" .dropzone-upload\").onclick = function () {\n      myDropzone4.enqueueFiles(myDropzone4.getFilesWithStatus(Dropzone.ADDED));\n    }; // Setup the button for remove all files\n\n\n    document.querySelector(id + \" .dropzone-remove-all\").onclick = function () {\n      $(id + \" .dropzone-upload, \" + id + \" .dropzone-remove-all\").css('display', 'none');\n      myDropzone4.removeAllFiles(true);\n    }; // On all files completed upload\n\n\n    myDropzone4.on(\"queuecomplete\", function (progress) {\n      $(id + \" .dropzone-upload\").css('display', 'none');\n    }); // On all files removed\n\n    myDropzone4.on(\"removedfile\", function (file) {\n      if (myDropzone4.files.length < 1) {\n        $(id + \" .dropzone-upload, \" + id + \" .dropzone-remove-all\").css('display', 'none');\n      }\n    });\n  };\n\n  var demo3 = function demo3() {\n    // set the dropzone container id\n    var id = '#kt_dropzone_5'; // set the preview element template\n\n    var previewNode = $(id + \" .dropzone-item\");\n    previewNode.id = \"\";\n    var previewTemplate = previewNode.parent('.dropzone-items').html();\n    previewNode.remove();\n    var myDropzone5 = new Dropzone(id, {\n      // Make the whole body a dropzone\n      url: \"https://keenthemes.com/scripts/void.php\",\n      // Set the url for your upload script location\n      parallelUploads: 20,\n      maxFilesize: 1,\n      // Max filesize in MB\n      previewTemplate: previewTemplate,\n      previewsContainer: id + \" .dropzone-items\",\n      // Define the container to display the previews\n      clickable: id + \" .dropzone-select\" // Define the element that should be used as click trigger to select files.\n\n    });\n    myDropzone5.on(\"addedfile\", function (file) {\n      // Hookup the start button\n      $(document).find(id + ' .dropzone-item').css('display', '');\n    }); // Update the total progress bar\n\n    myDropzone5.on(\"totaluploadprogress\", function (progress) {\n      $(id + \" .progress-bar\").css('width', progress + \"%\");\n    });\n    myDropzone5.on(\"sending\", function (file) {\n      // Show the total progress bar when upload starts\n      $(id + \" .progress-bar\").css('opacity', \"1\");\n    }); // Hide the total progress bar when nothing's uploading anymore\n\n    myDropzone5.on(\"complete\", function (progress) {\n      var thisProgressBar = id + \" .dz-complete\";\n      setTimeout(function () {\n        $(thisProgressBar + \" .progress-bar, \" + thisProgressBar + \" .progress\").css('opacity', '0');\n      }, 300);\n    });\n  };\n\n  return {\n    // public functions\n    init: function init() {\n      demo1();\n      demo2();\n      demo3();\n    }\n  };\n}();\n\nKTUtil.ready(function () {\n  KTDropzoneDemo.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/crud/file-upload/dropzonejs.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/metronic/js/pages/crud/file-upload/dropzonejs.js"]();
/******/ 	
/******/ })()
;